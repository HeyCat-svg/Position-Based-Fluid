#pragma kernel Update
#pragma kernel Hash2Grid
#pragma kernel ClearGridBuffer
#pragma kernel BuildGridBuffer
#pragma kernel ReorderParticleBuffer
#pragma kernel ComputeLambda
#pragma kernel ComputeDeltaPAndCollision
#pragma kernel UpdatePos
#pragma kernel UpdateVel
#pragma kernel ComputeVorticityAndDeltaV
#pragma kernel ApplyForceAndUpdatePV
#pragma kernel InitRigbodySumBorder
#pragma kernel AddBarycenter
#pragma kernel UpdateRigbodySumBorder
#pragma kernel ComputeBarycenter
#pragma kernel UpdateRWorldAndComputeMatA
#pragma kernel AddMatA
#pragma kernel ComputeRotationAndLocal2WorldMat
#pragma kernel UpdateRigbodyParticlePos
#pragma kernel DebugKernel

#include "Math.cginc"

#define PBF_BLOCK_SIZE 512


struct Particle {
    float3 oldPos;
    float3 newPos;
    float3 deltaP;
    float3 velocity;
    float3 deltaV;
    float3 force;
    float3 vorticity;
    int3 gridCoord;
    float lambda;
    float mass;
    float invMass;
    int rigbodyParticleIdx;
};

struct RigbodyData {
    int2 particleIdxRange;
    float4x4 local2world;
    float3 barycenter;
    float3 worldBarycenter;
    float mass;
    int sumBorder;
    int isStatic;
};

struct RigbodyParticle {
    float3 rLocal;
    float3 rWorld;
    float3 posWorld;
    float3 distGrad;
    float3 barycenterSum;
    float4x4 ASum;
    float distance;
    int rigbodyIdx;
};

int _ParticleNum;
float _Poly6Coeff;
float _SpickyCoeff;
float _GridH;
int3 _GridDim;
float _WQInv;
float3 _BorderMin;
float3 _BorderMax;
float3 _Gravity;
float _dt;
float _dtInv;
float _RestDensity;
float _H;
float _K;
int _N;
float _EpsilonLambda;
float _EpsilonVorticity;
float _CViscosity;

RWStructuredBuffer<RigbodyData> _RigbodyData;
RWStructuredBuffer<RigbodyParticle> _RigbodyParticles;
RWStructuredBuffer<Particle> _ParticleBufferUnsorted;
RWStructuredBuffer<Particle> _ParticleBufferSorted;
RWStructuredBuffer<int2> _GridParticlePair;
RWStructuredBuffer<int2> _GridBuffer;


int WorldCoord2GridIdx(float3 coord) {
    int3 gridCoord = (int3)((coord - _BorderMin) / _GridH);
    gridCoord.x = (gridCoord.x < 0) ? 0 : (gridCoord.x >= _GridDim.x) ? _GridDim.x - 1 : gridCoord.x;
    gridCoord.y = (gridCoord.y < 0) ? 0 : (gridCoord.y >= _GridDim.y) ? _GridDim.y - 1 : gridCoord.y;
    gridCoord.z = (gridCoord.z < 0) ? 0 : (gridCoord.z >= _GridDim.z) ? _GridDim.z - 1 : gridCoord.z;
    return gridCoord.x + gridCoord.y * _GridDim.x +
        gridCoord.z * _GridDim.x * _GridDim.y;
}

int3 WorldCoord2GridCoord(float3 coord) {
    int3 gridCoord = (int3) ((coord - _BorderMin) / _GridH);
    gridCoord.x = (gridCoord.x < 0) ? 0 : (gridCoord.x >= _GridDim.x) ? _GridDim.x - 1 : gridCoord.x;
    gridCoord.y = (gridCoord.y < 0) ? 0 : (gridCoord.y >= _GridDim.y) ? _GridDim.y - 1 : gridCoord.y;
    gridCoord.z = (gridCoord.z < 0) ? 0 : (gridCoord.z >= _GridDim.z) ? _GridDim.z - 1 : gridCoord.z;
    return gridCoord;
}

// ret: is coord valid(in border domain)
bool GridCoord2GridIdx(int3 coord, out int idx) {
    if (any(coord < int3(0, 0, 0)) || any(coord >= _GridDim)) {
        return false;
    }
    idx = coord.x + coord.y * _GridDim.x + coord.z * _GridDim.x * _GridDim.y;
    return true;
}

// return true if coord in domain
bool BorderCheck(float3 worldCoord) {
    return !(any(worldCoord < _BorderMin) || any(worldCoord >= _BorderMax));
}

float3 BorderClamp(float3 worldCoord) {
    float3 ret = float3(0, 0, 0);
    ret.x = (worldCoord.x < _BorderMin.x) ? _BorderMin.x : 
        (worldCoord.x >= _BorderMax.x) ? _BorderMax.x - 1e-3 : worldCoord.x;
    ret.y = (worldCoord.y < _BorderMin.y) ? _BorderMin.y :
        (worldCoord.y >= _BorderMax.y) ? _BorderMax.y - 1e-3 : worldCoord.y;
    ret.z = (worldCoord.z < _BorderMin.z) ? _BorderMin.z :
        (worldCoord.z >= _BorderMax.z) ? _BorderMax.z - 1e-3 : worldCoord.z;

    return ret;
}

float Poly6(float l, float h) {
    if (l > h || l == 0) {
        return 0;
    }
    return _Poly6Coeff * pow(h * h - l * l, 3);
}

float3 SpikyGradient(float3 r, float h) {
    float l = length(r);
    if (l > h || l == 0) {
        return float3(0, 0, 0);
    }
    return _SpickyCoeff * (h - l) * (h - l) / l * r;
}

float Scorr(float numerator) {
    float tmp = numerator * _WQInv;
    return -_K * tmp * tmp * tmp * tmp;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    // apply force
    _ParticleBufferUnsorted[idx].velocity += _dt * _ParticleBufferUnsorted[idx].force;
    // predict position
    _ParticleBufferUnsorted[idx].newPos = _ParticleBufferUnsorted[idx].oldPos +
        _dt * _ParticleBufferUnsorted[idx].velocity;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void Hash2Grid(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    // int2(gridIdx, particleIdx)
    _GridParticlePair[idx] = int2(WorldCoord2GridIdx(_ParticleBufferUnsorted[idx].newPos), idx);
    _ParticleBufferUnsorted[idx].gridCoord = WorldCoord2GridCoord(_ParticleBufferUnsorted[idx].newPos);
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ClearGridBuffer(uint3 id : SV_DispatchThreadID) {
    _GridBuffer[id.x] = int2(-1, -1);
}


// 0000011111122222334444   -> GridIdx
//       0 1  2  3  4
// start 0 5  11 16 18
// end   4 10 15 17 21
[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void BuildGridBuffer(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    
    uint preIdx = (idx == 0) ? (uint)_ParticleNum - 1 : idx - 1;
    uint nextIdx = (idx == (uint)_ParticleNum - 1) ? 0 : idx + 1;
    
    int preGridIdx = _GridParticlePair[preIdx].x;
    int curGridIdx = _GridParticlePair[idx].x;
    int nextGridIdx = _GridParticlePair[nextIdx].x;
    
    if (preGridIdx != curGridIdx) {
        _GridBuffer[curGridIdx].x = idx;    // find grid cell start
    }
    if (nextGridIdx != curGridIdx) {
        _GridBuffer[curGridIdx].y = idx;    // find grid cell end
    }
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ReorderParticleBuffer(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    _ParticleBufferSorted[idx] = _ParticleBufferUnsorted[_GridParticlePair[idx].y];
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ComputeLambda(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    
    if (_ParticleBufferSorted[idx].rigbodyParticleIdx != -1) {
        return;
    }
    
    float densityConstrain = 0;
    float lambdaDominator = 0;
    float3 gradient = float3(0, 0, 0);
    int3 gridCoord = _ParticleBufferSorted[idx].gridCoord;
    for (int i = gridCoord.x - 1; i <= gridCoord.x + 1; ++i) {
        for (int j = gridCoord.y - 1; j <= gridCoord.y + 1; ++j) {
            for (int k = gridCoord.z - 1; k <= gridCoord.z + 1; ++k) {
                int gridIdx = -1;
                if (GridCoord2GridIdx(int3(i, j, k), gridIdx)) {
                    int startParticleIdx = _GridBuffer[gridIdx].x;
                    int endParticleIdx = _GridBuffer[gridIdx].y;
                    if (startParticleIdx == -1 || endParticleIdx == -1) {
                        continue;
                    }
                    for (int pIdx = startParticleIdx; pIdx <= endParticleIdx; ++pIdx) {
                        float3 pij = _ParticleBufferSorted[idx].newPos - _ParticleBufferSorted[pIdx].newPos;
                        float l = length(pij);
                        if (l < _H) {
                            float3 grad = _ParticleBufferSorted[pIdx].mass * SpikyGradient(pij, _H) / _RestDensity;
                            gradient += grad;
                            densityConstrain += _ParticleBufferSorted[pIdx].mass * Poly6(l, _H);
                            lambdaDominator += _ParticleBufferSorted[pIdx].invMass * dot(grad, grad);
                        }
                    }
                }
            }
        }
    }
    densityConstrain = densityConstrain / _RestDensity - 1.0;
    lambdaDominator += (_ParticleBufferSorted[idx].invMass * dot(gradient, gradient) + _EpsilonLambda);
    _ParticleBufferSorted[idx].lambda = -_ParticleBufferSorted[idx].invMass * densityConstrain / lambdaDominator;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ComputeDeltaPAndCollision(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    
    Particle curParticle = _ParticleBufferSorted[idx];
    int3 gridCoord = curParticle.gridCoord;
    float lambda = curParticle.lambda;
    float3 deltaP = float3(0, 0, 0);
    
    // fluid
    if (curParticle.rigbodyParticleIdx == -1) {
        for (int i = gridCoord.x - 1; i <= gridCoord.x + 1; ++i) {
            for (int j = gridCoord.y - 1; j <= gridCoord.y + 1; ++j) {
                for (int k = gridCoord.z - 1; k <= gridCoord.z + 1; ++k) {
                    int gridIdx = -1;
                    if (GridCoord2GridIdx(int3(i, j, k), gridIdx)) {
                        int startParticleIdx = _GridBuffer[gridIdx].x;
                        int endParticleIdx = _GridBuffer[gridIdx].y;
                        if (startParticleIdx == -1 || endParticleIdx == -1) {
                            continue;
                        }
                        for (int pIdx = startParticleIdx; pIdx <= endParticleIdx; ++pIdx) {
                            if ((int)idx == pIdx) {
                                continue;
                            }
                            float3 pij = curParticle.newPos - _ParticleBufferSorted[pIdx].newPos;
                            float l = length(pij);
                            if (l < _H) {
                                Particle neighborParticle = _ParticleBufferSorted[pIdx];
                                // fluid-fluid
                                if (neighborParticle.rigbodyParticleIdx == -1) {
                                    float3 grad = neighborParticle.mass * SpikyGradient(pij, _H);
                                    deltaP += (lambda + neighborParticle.lambda + Scorr(Poly6(l, _H))) * grad;
                                }
                                // fluid-solid
                                else {
                                    int rigbodyParticleIdx = neighborParticle.rigbodyParticleIdx;
                                    // 乘上_RestDensity是为了与最后的除以_RestDensity抵消
                                    deltaP += 2e-4 * _RestDensity * curParticle.invMass / (curParticle.invMass + neighborParticle.invMass + 1e-3) *
                                        _RigbodyParticles[rigbodyParticleIdx].distance *
                                        mul(_RigbodyData[_RigbodyParticles[rigbodyParticleIdx].rigbodyIdx].local2world,
                                        float4(_RigbodyParticles[rigbodyParticleIdx].distGrad, 0)).xyz;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // solid
    else {
        for (int i = gridCoord.x - 1; i <= gridCoord.x + 1; ++i) {
            for (int j = gridCoord.y - 1; j <= gridCoord.y + 1; ++j) {
                for (int k = gridCoord.z - 1; k <= gridCoord.z + 1; ++k) {
                    int gridIdx = -1;
                    if (GridCoord2GridIdx(int3(i, j, k), gridIdx)) {
                        int startParticleIdx = _GridBuffer[gridIdx].x;
                        int endParticleIdx = _GridBuffer[gridIdx].y;
                        if (startParticleIdx == -1 || endParticleIdx == -1) {
                            continue;
                        }
                        for (int pIdx = startParticleIdx; pIdx <= endParticleIdx; ++pIdx) {
                            if ((int)idx == pIdx) {
                                continue;
                            }
                            float3 pij = curParticle.newPos - _ParticleBufferSorted[pIdx].newPos;
                            float l = length(pij);
                            if (l < _H) {
                                Particle neighborParticle = _ParticleBufferSorted[pIdx];
                                // solid-fluid
                                if (neighborParticle.rigbodyParticleIdx == -1) {
                                    int rigbodyParticleIdx = curParticle.rigbodyParticleIdx;
                                    // 乘上_RestDensity是为了与最后的除以_RestDensity抵消
                                    deltaP -= 2e-4 * _RestDensity * curParticle.invMass / (curParticle.invMass + neighborParticle.invMass + 1e-3) *
                                        _RigbodyParticles[rigbodyParticleIdx].distance *
                                        mul(_RigbodyData[_RigbodyParticles[rigbodyParticleIdx].rigbodyIdx].local2world,
                                        float4(_RigbodyParticles[rigbodyParticleIdx].distGrad, 0)).xyz;
                                }
                                // solid-solid
                                else {
                                    float di = _RigbodyParticles[curParticle.rigbodyParticleIdx].distance;
                                    float dj = _RigbodyParticles[neighborParticle.rigbodyParticleIdx].distance;
                                    float d = 0;
                                    float3 n = float3(0, 0, 0);
                                    if (di < dj) {
                                        d = di;
                                        n = mul(_RigbodyData[_RigbodyParticles[curParticle.rigbodyParticleIdx].rigbodyIdx].local2world,
                                            float4(_RigbodyParticles[curParticle.rigbodyParticleIdx].distGrad, 0)).xyz;
                                    }
                                    else {
                                        d = dj;
                                        n = -mul(_RigbodyData[_RigbodyParticles[neighborParticle.rigbodyParticleIdx].rigbodyIdx].local2world,
                                            float4(_RigbodyParticles[neighborParticle.rigbodyParticleIdx].distGrad, 0)).xyz;
                                    }
                                    // 乘上_RestDensity是为了与最后的除以_RestDensity抵消
                                    deltaP -= 2e-4 * _RestDensity * curParticle.invMass / (curParticle.invMass + neighborParticle.invMass + 1e-3) * d * n;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    deltaP /= _RestDensity;
    
    // collision with border
    float3 pos = BorderClamp(curParticle.newPos + deltaP);
    
    _ParticleBufferSorted[idx].deltaP = pos - curParticle.newPos;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void UpdatePos(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    _ParticleBufferSorted[idx].newPos += _ParticleBufferSorted[idx].deltaP;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void UpdateVel(uint3 id : SV_DispatchThreadID) {
    const int idx = id.x;
    _ParticleBufferSorted[idx].velocity = _dtInv * (_ParticleBufferSorted[idx].newPos - _ParticleBufferSorted[idx].oldPos);
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ComputeVorticityAndDeltaV(uint3 id : SV_DispatchThreadID) {
    const int idx = id.x;
    if (_ParticleBufferSorted[idx].rigbodyParticleIdx != -1) {
        return;
    }
    
    int3 gridCoord = _ParticleBufferSorted[idx].gridCoord;
    float3 vorticity = float3(0, 0, 0);
    float3 deltaV = float3(0, 0, 0);
    for (int i = gridCoord.x - 1; i <= gridCoord.x + 1; ++i) {
        for (int j = gridCoord.y - 1; j <= gridCoord.y + 1; ++j) {
            for (int k = gridCoord.z - 1; k <= gridCoord.z + 1; ++k) {
                int gridIdx = -1;
                if (GridCoord2GridIdx(int3(i, j, k), gridIdx)) {
                    int startParticleIdx = _GridBuffer[gridIdx].x;
                    int endParticleIdx = _GridBuffer[gridIdx].y;
                    if (startParticleIdx == -1 || endParticleIdx == -1) {
                        continue;
                    }
                    for (int pIdx = startParticleIdx; pIdx <= endParticleIdx; ++pIdx) {
                        if (_ParticleBufferSorted[pIdx].rigbodyParticleIdx != -1 || idx == pIdx) {
                            continue;
                        }
                        float3 pij = _ParticleBufferSorted[idx].newPos - _ParticleBufferSorted[pIdx].newPos;
                        float l = length(pij);
                        if (l < _H) {
                            float3 vji = _ParticleBufferSorted[pIdx].velocity - _ParticleBufferSorted[idx].velocity;
                            vorticity += cross(vji, -SpikyGradient(pij, _H));
                            deltaV += (vji * Poly6(l, _H));
                        }
                    }
                }
            }
        }
    }
    deltaV *= _CViscosity;
    _ParticleBufferSorted[idx].deltaV = deltaV;
    _ParticleBufferSorted[idx].vorticity = vorticity;
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void ApplyForceAndUpdatePV(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    if (_ParticleBufferSorted[idx].rigbodyParticleIdx != -1) {
        int rigbodyParticleIdx = _ParticleBufferSorted[idx].rigbodyParticleIdx;
        _ParticleBufferSorted[idx].force = _ParticleBufferSorted[idx].invMass * _ParticleBufferSorted[idx].mass * _Gravity;
        _ParticleBufferSorted[idx].oldPos = _ParticleBufferSorted[idx].newPos;
        // 更新刚体粒子buffer中粒子的当前世界坐标
        _RigbodyParticles[rigbodyParticleIdx].posWorld = _ParticleBufferSorted[idx].newPos;
        _RigbodyParticles[rigbodyParticleIdx].barycenterSum = _ParticleBufferSorted[idx].newPos;
        return;
    }
    
    int3 gridCoord = _ParticleBufferSorted[idx].gridCoord;
    float maxVorticityMag = 0;
    float3 maxVorticityPos = float3(0, 0, 0);
    for (int i = gridCoord.x - 1; i <= gridCoord.x + 1; ++i) {
        for (int j = gridCoord.y - 1; j <= gridCoord.y + 1; ++j) {
            for (int k = gridCoord.z - 1; k <= gridCoord.z + 1; ++k) {
                int gridIdx = -1;
                if (GridCoord2GridIdx(int3(i, j, k), gridIdx)) {
                    int startParticleIdx = _GridBuffer[gridIdx].x;
                    int endParticleIdx = _GridBuffer[gridIdx].y;
                    if (startParticleIdx == -1 || endParticleIdx == -1) {
                        continue;
                    }
                    for (int pIdx = startParticleIdx; pIdx <= endParticleIdx; ++pIdx) {
                        if (_ParticleBufferSorted[pIdx].rigbodyParticleIdx != -1) {
                            continue;
                        }
                        float3 pij = _ParticleBufferSorted[idx].newPos - _ParticleBufferSorted[pIdx].newPos;
                        float l = length(pij);
                        if (l < _H) {
                            float vorticityMag = length(_ParticleBufferSorted[pIdx].vorticity);
                            maxVorticityPos = (vorticityMag > maxVorticityMag) ? _ParticleBufferSorted[pIdx].newPos : maxVorticityPos;
                            maxVorticityMag = (vorticityMag > maxVorticityMag) ? vorticityMag : maxVorticityMag;
                        }
                    }
                }
            }
        }
    }
    
    float3 N = maxVorticityPos - _ParticleBufferSorted[idx].newPos;
    N /= (length(N) + 1e-4);
    _ParticleBufferSorted[idx].force = _Gravity + _EpsilonVorticity * cross(N, _ParticleBufferSorted[idx].vorticity);
    _ParticleBufferSorted[idx].velocity += _ParticleBufferSorted[idx].deltaV;
    _ParticleBufferSorted[idx].oldPos = _ParticleBufferSorted[idx].newPos;
}


int _AddStep;       // 求和用的

[numthreads(1, 1, 1)]
void InitRigbodySumBorder(uint3 id : SV_DispatchThreadID) {
    uint idx = id.x;
    _RigbodyData[idx].sumBorder = _RigbodyData[idx].particleIdxRange.y;
}


[numthreads(1, 1, 1)]
void AddBarycenter(uint3 id : SV_DispatchThreadID) {
    uint rigbodyIdx = id.x;             // 是哪一个刚体在求和
    uint rigbodyParticleIdx = id.y;     // 是刚体的哪一个粒子在求和
    
    if (_RigbodyData[rigbodyIdx].isStatic) {
        return;
    }
    
    int curPIdx = _RigbodyData[rigbodyIdx].particleIdxRange.x + rigbodyParticleIdx;
    int targetPIdx = curPIdx + _AddStep;
    if (targetPIdx > _RigbodyData[rigbodyIdx].sumBorder) {
        return;
    }
    _RigbodyParticles[curPIdx].barycenterSum += _RigbodyParticles[targetPIdx].barycenterSum;
}


[numthreads(1, 1, 1)]
void UpdateRigbodySumBorder(uint3 id : SV_DispatchThreadID) {
    uint rigbodyIdx = id.x;
    _RigbodyData[rigbodyIdx].sumBorder = min(_RigbodyData[rigbodyIdx].sumBorder, _RigbodyData[rigbodyIdx].particleIdxRange.x + _AddStep - 1);
}


[numthreads(1, 1, 1)]
void ComputeBarycenter(uint3 id : SV_DispatchThreadID) {
    uint rigbodyIdx = id.x;
    
    if (_RigbodyData[rigbodyIdx].isStatic) {
        return;
    }
    
    _RigbodyData[rigbodyIdx].worldBarycenter = 
        _RigbodyParticles[_RigbodyData[rigbodyIdx].particleIdxRange.x].barycenterSum / 
        (float)(_RigbodyData[rigbodyIdx].particleIdxRange.y - _RigbodyData[rigbodyIdx].particleIdxRange.x + 1);
}


[numthreads(1, 1, 1)]
void UpdateRWorldAndComputeMatA(uint3 id : SV_DispatchThreadID) {
    uint rigbodyPIdx = id.x;
    
    if (_RigbodyData[_RigbodyParticles[rigbodyPIdx].rigbodyIdx].isStatic) {
        return;
    }
    
    _RigbodyParticles[rigbodyPIdx].rWorld =
        _RigbodyParticles[rigbodyPIdx].posWorld - _RigbodyData[_RigbodyParticles[rigbodyPIdx].rigbodyIdx].worldBarycenter;
    float3 rLoc = _RigbodyParticles[rigbodyPIdx].rLocal;
    float3 rWorld = _RigbodyParticles[rigbodyPIdx].rWorld;
    _RigbodyParticles[rigbodyPIdx].ASum = mul(float4x1(rWorld, 0), float1x4(rLoc, 0));
}


[numthreads(1, 1, 1)]
void AddMatA(uint3 id : SV_DispatchThreadID) {
    uint rigbodyIdx = id.x; // 是哪一个刚体在求和
    uint rigbodyParticleIdx = id.y; // 是刚体的哪一个粒子在求和
    
    if (_RigbodyData[rigbodyIdx].isStatic) {
        return;
    }
    
    int curPIdx = _RigbodyData[rigbodyIdx].particleIdxRange.x + rigbodyParticleIdx;
    int targetPIdx = curPIdx + _AddStep;
    if (targetPIdx > _RigbodyData[rigbodyIdx].sumBorder) {
        return;
    }
    _RigbodyParticles[curPIdx].ASum += _RigbodyParticles[targetPIdx].ASum;
}


[numthreads(1, 1, 1)]
void ComputeRotationAndLocal2WorldMat(uint3 id : SV_DispatchThreadID) {
    uint rigbodyIdx = id.x;
    
    if (_RigbodyData[rigbodyIdx].isStatic) {
        return;
    }
    
    float3x3 A = (float3x3)_RigbodyParticles[_RigbodyData[rigbodyIdx].particleIdxRange.x].ASum;
    float3x3 U;
    float3 D;
    float3x3 V;
    GetSVD3D(A, U, D, V);
    float3x3 rotationMat = mul(U, transpose(V));
    float3 wc = _RigbodyData[rigbodyIdx].worldBarycenter;
    float4x4 T = {
        1, 0, 0, wc.x,
        0, 1, 0, wc.y,
        0, 0, 1, wc.z,
        0, 0, 0, 1
    };
    float4x4 R = {
        float4(rotationMat._m00_m01_m02, 0),
        float4(rotationMat._m10_m11_m12, 0),
        float4(rotationMat._m20_m21_m22, 0),
        float4(0, 0, 0, 1)
    };
    _RigbodyData[rigbodyIdx].local2world = mul(T, R);
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void UpdateRigbodyParticlePos(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    if (_ParticleBufferSorted[idx].rigbodyParticleIdx != -1) {
        int rigbodyParticleIdx = _ParticleBufferSorted[idx].rigbodyParticleIdx;
        _ParticleBufferSorted[idx].oldPos =
            mul(_RigbodyData[_RigbodyParticles[rigbodyParticleIdx].rigbodyIdx].local2world,
            float4(_RigbodyParticles[rigbodyParticleIdx].rLocal, 1)).xyz;
    }
}


[numthreads(PBF_BLOCK_SIZE, 1, 1)]
void DebugKernel(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    _ParticleBufferSorted[idx].oldPos = _ParticleBufferSorted[idx].newPos;
}
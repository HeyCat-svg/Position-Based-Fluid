#pragma kernel CompareAndExchange
#pragma kernel ErrorCorrect


#define SORT_BLOCK_SIZE 64


uint _Level;
uint _LevelMask;

StructuredBuffer<int2> _Input : register(t0);
RWStructuredBuffer<int2> _Output : register(u0);

bool Compare(int2 left, int2 right) {
    return (left.x == right.x) ? (left.y <= right.y) : (left.x <= right.x);
}


[numthreads(SORT_BLOCK_SIZE, 1, 1)]
void CompareAndExchange(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    // idx&_LevelMask==0 then ascending else descending
    _Output[idx] = (Compare(_Input[idx & ~_Level], _Input[idx | _Level]) == (bool) (_LevelMask & idx)) ?
        _Input[idx ^ _Level] : _Input[idx];
}


[numthreads(SORT_BLOCK_SIZE, 1, 1)]
void ErrorCorrect(uint3 id : SV_DispatchThreadID) {
    const uint idx = id.x;
    if (idx + 1 < _LevelMask && _Output[idx].x > _Output[idx + 1].x) {
        int2 tmp = _Output[idx];
        _Output[idx] = _Output[idx + 1];
        _Output[idx + 1] = tmp;
    }
}
